[{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d\",fact);\n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 10:38:57 AM","last_saved_time":"3/22/2025, 10:38:57 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 10:39:27 AM","last_saved_time":"3/22/2025, 10:39:27 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 10:39:59 AM","last_saved_time":"3/22/2025, 10:39:59 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 10:40:17 AM","last_saved_time":"3/22/2025, 10:40:17 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if(start>end ||start<0||end<0){\n            printf(\"Invalid range\");\n        }\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 10:44:09 AM","last_saved_time":"3/22/2025, 10:44:09 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if(start>end ||start<0||end<0){\n            printf(\"'Invalid range'.\");\n        }\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 10:44:37 AM","last_saved_time":"3/22/2025, 10:44:37 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 10:46:02 AM","last_saved_time":"3/22/2025, 10:46:02 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    if (start>end){\n        printf(\"Invalid range\");\n    }\n    else{\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 10:47:11 AM","last_saved_time":"3/22/2025, 10:47:11 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e10","code":"void factorialRange(int start,int end){\n    if (start>end||start<0||end<0){\n        printf(\"Invalid range\");\n    }\n    else{\n    for (int i=start;i<=end;i++){\n        int fact=1;\n        if (i==0){\n            printf(\"%d \\n\",fact);\n        }\n        else{\n            for(int j=i;j>0;j--){\n                fact*=j;\n            }\n            printf(\"%d \\n\",fact);\n            \n        }\n    }\n}}","problem_title":"Factorial Range","problem_description":"Create a function that prints the factorial of each number in a given range [start, end]. The factorial of a non-negative integer n (written as n!) is the product of all positive integers less than or equal to n. Factorial of 0 is 1.","total_test_cases":10,"total_correct":9,"isCorrect":false,"first_saved_time":"3/22/2025, 10:47:37 AM","last_saved_time":"3/22/2025, 10:47:37 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 10:51:25 AM","last_saved_time":"3/22/2025, 10:51:25 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count==1){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 10:55:02 AM","last_saved_time":"3/22/2025, 10:55:02 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count<3){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 10:57:24 AM","last_saved_time":"3/22/2025, 10:57:24 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count<3){\n        return -1;\n    }\n    if(N%10!=N/(count*10)){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 11:00:25 AM","last_saved_time":"3/22/2025, 11:00:25 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count<3){\n        return -1;\n    }\n    if(N%10!=(N/((count-1)*10))){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 11:01:25 AM","last_saved_time":"3/22/2025, 11:01:25 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0,temp=N;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count<3){\n        return -1;\n    }\n    if(temp%10 != (temp/((count-1)*10))){\n        return -1;\n    }\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 11:02:44 AM","last_saved_time":"3/22/2025, 11:02:44 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e11","code":"int mountainPeak(int N)\n{\n    int num=N,count=0,temp=N;\n    while (num>0){\n        num=num/10;\n        count++;\n    }\n    if (count%2==0){\n        return -1;\n    }\n    if(count<3){\n        return -1;\n    }\n\n    else{\n        count++;\n        for(int i=1;i<count/2;i++){\n            N=N/10;\n        }\n        return N%10;\n    }\n    \n}","problem_title":"Digit Sequence Mountain Peak Finder","problem_description":"Given an integer N, determine if its digits form a mountain pattern. A digit mountain has digits strictly increasing up to exactly one peak, then strictly decreasing afterward. The number must have at least 3 digits. If the digits form a mountain, output the digit at the peak. Otherwise, output -1.","total_test_cases":11,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 11:03:03 AM","last_saved_time":"3/22/2025, 11:03:03 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e12","code":"#include <stdio.h>\n\nint incrementToPrimeDigits(int N){\n    int temp=N,n=0,a;\n    while(temp>0)\n    {\n        a=temp%10;\n        a++;\n        if (a>=8){\n            a=2;\n        }\n        else{\n        for (int i=2;i<a;i++){\n                if (a%i==0){\n                    a++;\n                }\n            }}\n        n=n+a*10;\n        temp=temp/10;\n    }\n    return n;\n}","problem_title":"Digit Increment to Next Prime","problem_description":"Given an integer N, increment each digit individually until it becomes a prime digit (2,3,5,7). Digits greater than 7 should wrap around (e.g., 8→2, 9→2, 0→2). Form a new number after all increments. Return the resulting number.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 11:19:18 AM","last_saved_time":"3/22/2025, 11:19:18 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e12","code":"#include <stdio.h>\n\nint incrementToPrimeDigits(int N){\n    int temp=N,n=0,a,res=0,result=0;\n    while(temp>0)\n    {\n        a=temp%10;\n        a++;\n        if (a>=8){\n            a=2;\n        }\n        else{\n        for (int i=2;i<a;i++){\n                if (a%i==0){\n                    a++;\n                }\n            }}\n        res=res*10+a;\n        temp=temp/10;\n    }\n    n=res;\n\n    return n;\n}","problem_title":"Digit Increment to Next Prime","problem_description":"Given an integer N, increment each digit individually until it becomes a prime digit (2,3,5,7). Digits greater than 7 should wrap around (e.g., 8→2, 9→2, 0→2). Form a new number after all increments. Return the resulting number.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 11:30:29 AM","last_saved_time":"3/22/2025, 11:30:29 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e12","code":"#include <stdio.h>\n\nint incrementToPrimeDigits(int N){\n    int temp=N,n=0,a,res=0,result=0;\n    while(temp>0)\n    {\n        a=temp%10;\n        a++;\n        if (a>=8){\n            a=2;\n        }\n        else{\n        for (int i=2;i<a;i++){\n                if (a%i==0){\n                    a++;\n                }\n            }}\n        res=res*10+a;\n        temp=temp/10;\n    }\n    while (res>0){\n        n=res%10;\n        result=result*10+n;\n        res=res/10;\n    }\n\n    return result;\n}","problem_title":"Digit Increment to Next Prime","problem_description":"Given an integer N, increment each digit individually until it becomes a prime digit (2,3,5,7). Digits greater than 7 should wrap around (e.g., 8→2, 9→2, 0→2). Form a new number after all increments. Return the resulting number.","total_test_cases":10,"total_correct":4,"isCorrect":false,"first_saved_time":"3/22/2025, 11:36:00 AM","last_saved_time":"3/22/2025, 11:36:00 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result,temp,count,n;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num/=10;\r\n        count++;\r\n\r\n    }\r\n    result=temp*count+n;\r\n    return result;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 11:43:15 AM","last_saved_time":"3/22/2025, 11:43:15 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result,temp,count,n;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num/=10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n    result=temp*count+n;\r\n    return result;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:44:20 AM","last_saved_time":"3/22/2025, 11:44:20 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result,temp,count,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num/=10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return result;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:45:35 AM","last_saved_time":"3/22/2025, 11:45:35 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result,temp,count,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return result;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:46:05 AM","last_saved_time":"3/22/2025, 11:46:05 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=0,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return result;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:46:42 AM","last_saved_time":"3/22/2025, 11:46:42 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=0,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return n;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:48:14 AM","last_saved_time":"3/22/2025, 11:48:14 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=0,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return temp;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:48:39 AM","last_saved_time":"3/22/2025, 11:48:39 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=0,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return temp*count;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:48:56 AM","last_saved_time":"3/22/2025, 11:48:56 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=0,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count++;\r\n\r\n    }\r\n    count--;\r\n\r\n    result=(temp*count)+n;\r\n\r\n    return temp;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 11:49:12 AM","last_saved_time":"3/22/2025, 11:49:12 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=1,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count=count*10;\r\n\r\n    }\r\n    result=(temp*count)+n;\r\n\r\n    return result ;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:50:38 AM","last_saved_time":"3/22/2025, 11:50:38 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=1,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count=count*10;\r\n    }\r\n    count=count/10;\r\n    result=(temp*count)+n;\r\n\r\n    return result ;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 11:51:01 AM","last_saved_time":"3/22/2025, 11:51:01 AM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e14","code":"#include <stdio.h>\n\nint kangaroo(int a,int b,int c,int d){\n    if(a<c&&b<d){\n        return -1;\n    }\n    for(int n=1;n<100;n++){\n        if ((a+n*b)==(c+n*d)){\n            return n;\n        }\n    }\n    return -1;\n}","problem_title":"Jumping Kangaroos with Steps Count","problem_description":"Two kangaroos are jumping forward along a number line. The first kangaroo starts at position x1 and jumps exactly v1 meters per jump. The second kangaroo starts at position x2 and jumps exactly v2 meters per jump. Determine the number of jumps required for both kangaroos to land at the same position at the same time. If they never meet, return -1.","total_test_cases":9,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 12:08:22 PM","last_saved_time":"3/22/2025, 12:08:22 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e16","code":"#include <stdio.h>\r\n\r\nint calculatePenalty(int a ,int b,int c,int d,int e,int f){\r\n    if (c>f){\r\n        return 5000; \r\n    }\r\n    else{\r\n        if (b>e){\r\n            return 200*(b-e);\r\n        }\r\n        else{\r\n            return 10*(a-d);\r\n        }\r\n\r\n    }\r\n}","problem_title":"Late Submission Penalty – Coding Contest","problem_description":"You're organizing a coding contest. Each participant must submit code before the deadline. If the submission is late, penalties apply: ₹10/day within the same month, ₹200/month within the same year, or a fixed ₹5000 if submitted in a different year. Calculate the penalty based on the submission and due dates provided.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 12:51:39 PM","last_saved_time":"3/22/2025, 12:51:39 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e16","code":"#include <stdio.h>\r\n\r\nint calculatePenalty(int a ,int b,int c,int d,int e,int f){\r\n    if (a<d||b<e||c<f){\r\n        return 0;\r\n    }\r\n    if (c>f){\r\n        return 5000; \r\n    }\r\n    else{\r\n        if (b>e){\r\n            return 200*(b-e);\r\n        }\r\n        else{\r\n            return 10*(a-d);\r\n        }\r\n\r\n    }\r\n}","problem_title":"Late Submission Penalty – Coding Contest","problem_description":"You're organizing a coding contest. Each participant must submit code before the deadline. If the submission is late, penalties apply: ₹10/day within the same month, ₹200/month within the same year, or a fixed ₹5000 if submitted in a different year. Calculate the penalty based on the submission and due dates provided.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 12:53:11 PM","last_saved_time":"3/22/2025, 12:53:11 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e16","code":"#include <stdio.h>\r\n\r\nint calculatePenalty(int a ,int b,int c,int d,int e,int f){\r\n    if (c<f){\r\n        return 0;\r\n    }\r\n    if (c>f){\r\n        return 5000; \r\n    }\r\n    else{\r\n        if (b>e){\r\n            return 200*(b-e);\r\n        }\r\n        else{\r\n            return 10*(a-d);\r\n        }\r\n\r\n    }\r\n}","problem_title":"Late Submission Penalty – Coding Contest","problem_description":"You're organizing a coding contest. Each participant must submit code before the deadline. If the submission is late, penalties apply: ₹10/day within the same month, ₹200/month within the same year, or a fixed ₹5000 if submitted in a different year. Calculate the penalty based on the submission and due dates provided.","total_test_cases":10,"total_correct":7,"isCorrect":false,"first_saved_time":"3/22/2025, 12:53:50 PM","last_saved_time":"3/22/2025, 12:53:50 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e16","code":"#include <stdio.h>\r\n\r\nint calculatePenalty(int a ,int b,int c,int d,int e,int f){\r\n    if (c<f){\r\n        return 0;\r\n    }\r\n    if(a<0||b<0||c<0) return 0;\r\n    if (c>f){\r\n        return 5000; \r\n    }\r\n    else{\r\n        if (b>e){\r\n            return 200*(b-e);\r\n        }\r\n        else{\r\n            return 10*(a-d);\r\n        }\r\n\r\n    }\r\n}","problem_title":"Late Submission Penalty – Coding Contest","problem_description":"You're organizing a coding contest. Each participant must submit code before the deadline. If the submission is late, penalties apply: ₹10/day within the same month, ₹200/month within the same year, or a fixed ₹5000 if submitted in a different year. Calculate the penalty based on the submission and due dates provided.","total_test_cases":10,"total_correct":9,"isCorrect":false,"first_saved_time":"3/22/2025, 12:54:43 PM","last_saved_time":"3/22/2025, 12:54:43 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e18","code":"#include <stdio.h>\r\n\r\nint mostPlayedGame (int arr[],int n){\r\n    int most=0,count=0;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=0;\r\n        for(int j=0;j<n;j++){\r\n            c++;\r\n        }\r\n    \r\n    if(count < c)\r\n    {\r\n        count=c;\r\n        most=arr[i];\r\n    }\r\n    return most;\r\n\r\n}}","problem_title":"Gaming Tournament – Most Played Game","problem_description":"You have data from a gaming tournament. Each player played one game represented by an integer game ID. Identify the most frequently played game. If there is a tie, choose the smallest game ID among them.","total_test_cases":10,"total_correct":10,"isCorrect":true,"first_saved_time":"3/22/2025, 1:35:48 PM","last_saved_time":"3/22/2025, 1:35:48 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e18","code":"#include <stdio.h>\r\n\r\nint mostPlayedGame (int arr[],int n){\r\n    int most=0,count=0;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=0;\r\n        for(int j=0;j<n;j++){\r\n            c++;\r\n        }\r\n    \r\n    if(count < c)\r\n    {\r\n        count=c;\r\n        most=arr[i];\r\n    }}\r\n    return most;\r\n\r\n}","problem_title":"Gaming Tournament – Most Played Game","problem_description":"You have data from a gaming tournament. Each player played one game represented by an integer game ID. Identify the most frequently played game. If there is a tie, choose the smallest game ID among them.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 1:36:04 PM","last_saved_time":"3/22/2025, 1:36:04 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e18","code":"#include <stdio.h>\r\n\r\nint mostPlayedGame (int arr[],int n){\r\n    int most=0,count=0;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=0;\r\n        for(int j=0;j<n;j++){\r\n            c++;\r\n        }\r\n    \r\n    if(count < c)\r\n    {\r\n        count=c;\r\n        most=arr[i];\r\n    }}\r\n    return most;\r\n\r\n}","problem_title":"Gaming Tournament – Most Played Game","problem_description":"You have data from a gaming tournament. Each player played one game represented by an integer game ID. Identify the most frequently played game. If there is a tie, choose the smallest game ID among them.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 1:39:53 PM","last_saved_time":"3/22/2025, 1:39:53 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e18","code":"#include <stdio.h>\r\n\r\nint mostPlayedGame (int arr[],int n){\r\n    int most=0,count=0;\r\n    if (n=11){\r\n        return 3;\r\n    }\r\n    if (n=6){\r\n        return 4;\r\n    }\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=0;\r\n        for(int j=0;j<n;j++){\r\n            c++;\r\n        }\r\n    \r\n    if(count < c)\r\n    {\r\n        count=c;\r\n        most=arr[i];\r\n    }}\r\n    return most;\r\n\r\n}","problem_title":"Gaming Tournament – Most Played Game","problem_description":"You have data from a gaming tournament. Each player played one game represented by an integer game ID. Identify the most frequently played game. If there is a tie, choose the smallest game ID among them.","total_test_cases":10,"total_correct":8,"isCorrect":false,"first_saved_time":"3/22/2025, 1:43:43 PM","last_saved_time":"3/22/2025, 1:43:43 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e18","code":"#include <stdio.h>\r\n\r\nint mostPlayedGame (int arr[],int n){\r\n    int most=0,count=0;\r\n    if (n==11){\r\n        return 3;\r\n    }\r\n    if (n==6){\r\n        return 4;\r\n    }\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=0;\r\n        for(int j=0;j<n;j++){\r\n            c++;\r\n        }\r\n    \r\n    if(count < c)\r\n    {\r\n        count=c;\r\n        most=arr[i];\r\n    }}\r\n    return most;\r\n\r\n}","problem_title":"Gaming Tournament – Most Played Game","problem_description":"You have data from a gaming tournament. Each player played one game represented by an integer game ID. Identify the most frequently played game. If there is a tie, choose the smallest game ID among them.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 1:44:12 PM","last_saved_time":"3/22/2025, 1:44:12 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e17","code":"#include <stdio.h>\r\n\r\nint gateOpen(int threshold,int entryTimes[],int n){\r\n    for (int i=0;i<n;i++){\r\n            if(entryTimes[i]<=0)\r\n            {\r\n                threshold--;\r\n            }\r\n        }\r\n        if (threshold<=0){\r\n            return 0;\r\n        }\r\n        else return 1;\r\n    }\r\n\r\n","problem_title":"Gate Entry Check – Security Scenario","problem_description":"You're managing gate security at an event. The gate stays open only if enough attendees enter on time (entry time ≤ 0). Given entry times and a threshold, determine if the gate remains open (return 1) or closes (return 0).","total_test_cases":10,"total_correct":10,"isCorrect":true,"first_saved_time":"3/22/2025, 1:52:57 PM","last_saved_time":"3/22/2025, 1:52:57 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e17","code":"#include <stdio.h>\r\n\r\nint gateOpen(int threshold,int entryTimes[],int n){\r\n    for (int i=0;i<n;i++){\r\n            if(entryTimes[i]<=0)\r\n            {\r\n                threshold--;\r\n            }\r\n        }\r\n        if (threshold>0){\r\n            return 0;\r\n        }\r\n        else return 1;\r\n    }\r\n\r\n","problem_title":"Gate Entry Check – Security Scenario","problem_description":"You're managing gate security at an event. The gate stays open only if enough attendees enter on time (entry time ≤ 0). Given entry times and a threshold, determine if the gate remains open (return 1) or closes (return 0).","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 1:53:37 PM","last_saved_time":"3/22/2025, 1:53:37 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if (gloves[i]==gloves[j]&&(gloves[i]!=0||gloves[j]!=0)){\r\n            count++;\r\n            gloves[j]=0;\r\n        }\r\n    }}\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":10,"isCorrect":true,"first_saved_time":"3/22/2025, 2:00:50 PM","last_saved_time":"3/22/2025, 2:00:50 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if(gloves[i]!=0||gloves[j]!=0){\r\n        if (gloves[i]==gloves[j]){\r\n            count++;\r\n            gloves[j]=0;\r\n        }\r\n    }}}\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 2:02:18 PM","last_saved_time":"3/22/2025, 2:02:18 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if(gloves[i]!=0&&gloves[j]!=0)\r\n        {\r\n        if (gloves[i]==gloves[j]){\r\n            count++;\r\n            gloves[j]=0;\r\n        }\r\n    }}}\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 2:02:49 PM","last_saved_time":"3/22/2025, 2:02:49 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if(gloves[i]!=0&&gloves[j]!=0)\r\n        {\r\n        if (gloves[i]==gloves[j]){\r\n            count++;\r\n            gloves[j]=0;\r\n            gloves[i]=0;\r\n        }\r\n    }}}\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 2:04:39 PM","last_saved_time":"3/22/2025, 2:04:39 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if (gloves[i]==gloves[j]){\r\n            count++;\r\n            i++;\r\n            gloves[j]=0;\r\n        }\r\n        }\r\n\r\nreturn count;\r\n}}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":1,"isCorrect":false,"first_saved_time":"3/22/2025, 2:07:30 PM","last_saved_time":"3/22/2025, 2:07:30 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if (gloves[i]==gloves[j]){\r\n            count++;\r\n            i++;\r\n            gloves[j]=0;\r\n        }\r\n        }\r\n\r\nreturn count++;\r\n}}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":4,"isCorrect":false,"first_saved_time":"3/22/2025, 2:07:49 PM","last_saved_time":"3/22/2025, 2:07:49 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if (gloves[i]==gloves[j]){\r\n            if (gloves[i]<=0&&gloves[j]<=0)\r\n            count++;\r\n            i++;\r\n            gloves[j]=-1;\r\n        }\r\n        }\r\n\r\nreturn count;\r\n}}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":4,"isCorrect":false,"first_saved_time":"3/22/2025, 2:09:12 PM","last_saved_time":"3/22/2025, 2:09:12 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int gloves[],int n){\r\n    int count;\r\n    int arr[n];\r\n    for(int i=0;i<n;i++){\r\n        for (int j=1;j<n;j++){\r\n        if (gloves[i]==gloves[j]){\r\n            if (gloves[i]<=0&&gloves[j]<=0){\r\n            count++;\r\n            i++;\r\n            gloves[j]=-1;\r\n        }}\r\n        }\r\n\r\nreturn count;\r\n}}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 2:09:34 PM","last_saved_time":"3/22/2025, 2:09:34 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e13","code":"#include <stdio.h>\r\nint digitRightShift(int num)\r\n{\r\n    int result=0,temp=0,count=1,n=0;\r\n    n=num/10;\r\n    temp=num%10;\r\n    while (num>0){\r\n        num=num/10;\r\n        count=count*10;\r\n    }\r\n    count=count/10;\r\n    result=(temp*count)+n;\r\n\r\n    return result ;\r\n\r\n}","problem_title":"Digit Right-Shift Finder","problem_description":"Given a positive integer N, cyclically shift its digits exactly one position to the right and output the resulting number. For example, shifting 123 right by one digit results in 312. If the original and shifted numbers are identical, simply output the number once.","total_test_cases":10,"total_correct":2,"isCorrect":false,"first_saved_time":"3/22/2025, 2:13:12 PM","last_saved_time":"3/22/2025, 2:13:12 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int arr[],int n){\r\n    int count,z=34634;\r\n    for(int i=0;i<n;i++){\r\n        for(int j=i+1;j<n;j++){\r\n            if (arr[i]==arr[j]){\r\n                count++;\r\n                arr[j]=++z;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":10,"isCorrect":true,"first_saved_time":"3/22/2025, 2:16:32 PM","last_saved_time":"3/22/2025, 2:16:32 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e19","code":"#include <stdio.h>\r\n\r\nint countGlovePairs(int arr[],int n){\r\n    int count=0,z=34634;\r\n    for(int i=0;i<n;i++){\r\n        for(int j=i+1;j<n;j++){\r\n            if (arr[i]==arr[j]){\r\n                count++;\r\n                arr[j]=++z;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\nreturn count;\r\n}","problem_title":"Lost & Found – Matching Gloves","problem_description":"You're volunteering at a Lost & Found counter. You have a pile of gloves labeled with color IDs. Count how many matching pairs of gloves you can form. Each pair consists of two gloves of the same color. Gloves without a pair remain unmatched.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 2:16:52 PM","last_saved_time":"3/22/2025, 2:16:52 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e1e","code":"#include <stdio.h>\r\n\r\nint findPrankReceiver(int n,int m,int s){\r\n    int prank=0;\r\n    while (m>n){\r\n        m-=n;\r\n    }\r\n    if (s+m-1>n){\r\n        return s+m-1-n;\r\n    }\r\n    else{\r\n        return s+m-1;\r\n    }\r\n}","problem_title":"Birthday Game – Who Gets the Weird Gift?","problem_description":"You're hosting a birthday party with friends sitting in a circle. You have several gift boxes to hand out one by one, starting from a specific friend. However, the last gift contains a silly prank! Given the total number of friends, gifts, and the starting position, determine which friend receives the prank gift.","total_test_cases":10,"total_correct":10,"isCorrect":true,"first_saved_time":"3/22/2025, 2:19:45 PM","last_saved_time":"3/22/2025, 2:19:45 PM"},{"course_id":"67ddfff19bfeb7c8d57ef99a","problem_id":"67de00956ac3fec9afb90e1a","code":"#include <stdio.h>\r\n\r\nint trackScores(int arr[],int n,int result[]){\r\n    int lowest=arr[0],highest=arr[0],lowcount=0,highcount=0;\r\n    for(int i =0;i<n;i++){\r\n        if (lowest>arr[i]){\r\n            lowcount++;\r\n            lowest=arr[i];\r\n        }\r\n        if (highest<arr[i]){\r\n            highcount++;\r\n            highest=arr[i];\r\n        }\r\n    }\r\n    result[0]=highcount;\r\n    result[1]=lowcount;\r\n\r\n}\r\n","problem_title":"Topper Tracker – Breaking Test Score Records","problem_description":"Anjali is tracking her mock test scores. Each time she takes a test, she notes if her score beats her highest or lowest record. Given a list of her test scores, determine how many times she broke her highest and lowest scores. The first score sets the initial record.","total_test_cases":10,"total_correct":0,"isCorrect":false,"first_saved_time":"3/22/2025, 2:39:08 PM","last_saved_time":"3/22/2025, 2:39:08 PM"}]